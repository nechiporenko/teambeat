// Core imports
@import "../bourbon/bourbon";

// Default project variables
$container-padding:25px;
$container-max-width:1200px + 2*$container-padding;
$breakpoint:799px;
$grid-gutter:1.8%;

//colors
//$text-color:#4e3d1e;
$text-color:#58402C;
//$primary:#b75130;
$primary:#30488F;
$border-color:#e1ddd4;

//fonts
$font-main:'HelveticaNeue-Light';
$font-italic:'HelveticaNeue-LightItalic';
$font-alt-medium:'AvenirNext-Medium';
$font-alt-regular:'AvenirNext-Regular';


//Mixins
@mixin font-size($sizeValue: 1.6) {
    font-size: ($sizeValue * 10) + px;
    font-size: $sizeValue + rem;
}


//ie8 clearfix
//for new browsers, use bourbon clearfix() mixin
@mixin clear-fix(){
    &:before,
    &:after {
        content: "";
        display: table;
    }

    &:after {
        clear: both;
    }
}

//px/rem
// html {
//  font-size: 62.5%; //on _main.scss
//}

@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

@mixin px-to-rem($property, $values) {
  $px : ();
  $rem: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == "px" {
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" {
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}

//Grid Mixins
@mixin grid-container(){
    width: 100%;
    @include px-to-rem(max-width, $container-max-width);
    margin: 0 auto;
    @include px-to-rem(padding, 0 $container-padding);
    box-sizing: border-box;
    @include clear-fix;
}
